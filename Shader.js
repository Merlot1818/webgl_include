var SPRITE_VERTEX_SHADER = 'uniform int useScreenCoordinates;\nuniform int sizeAttenuation;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nuniform bool vertical;\nuniform float fixedSize;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\n\nvoid main() {\n  vec4 finalPosition;\n  finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n  vUV = uvOffset + uv * uvScale;\n  vec2 finalScale;\n  if(fixedSize != 0.0){\n    finalScale = scale  * length(finalPosition.xyz) / fixedSize;\n  }else{\n    finalScale = scale;\n  }\n  vec2 alignedPosition = (position + alignment) * finalScale;\n  vec2 rotatedPosition;\n  rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n  rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n  vec4 upPosition;\n  vec4 rightPosition = vec4(finalScale.x,0.0,0.0,1.0);\n  if(vertical){\n    upPosition =  modelViewMatrix * vec4( 0.0, 1.0, 0.0, 1.0 ) - finalPosition;\n    normalize(upPosition);\n  }\n  if(vertical){\n    finalPosition.xyz += (rotatedPosition.x * rightPosition.xyz / finalScale.x) + (rotatedPosition.y * upPosition.xyz / scale.y);\n  }else{\n    finalPosition.xy += rotatedPosition;\n  }\n  finalPosition = projectionMatrix * finalPosition;\n  gl_Position = finalPosition;\n}';
var SPRITE_FRAGMENT_SHADER = 'uniform vec3 color;\nuniform int useMap;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\n\nvoid main() {\n  if(useMap > 0){\n    vec4 texture = texture2D( map, vUV );\n    if ( texture.a < alphaTest ) {\n      discard;\n    }\n    gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\n  } else {\n    gl_FragColor = vec4( color, 1.0);\n  }\n  if ( fogType > 0 ) {\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = 0.0;\n    if ( fogType == 1 ) {\n      fogFactor = smoothstep( fogNear, fogFar, depth );\n    } else {\n      const float LOG2 = 1.442695;\n      float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\n      fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n    }\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n  }\n}';
